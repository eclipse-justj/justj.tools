/**
 * Copyright (c) 2021 Eclipse contributors and others.
 *
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.justj.codegen.model.util;


import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;


public class TemurinIndexer
{

  private static final Pattern TAG_NAME_ANY = Pattern.compile("\"name\"\\s*:\\s*\"([^\"]+)\"");

  private static final Pattern TAG_NAME = Pattern.compile("\"name\"\\s*:\\s*\"(jdk-([0-9]+)(?:\\.([0-9]+))?(?:\\.([0-9]+))?(?:\\.([0-9]+))?\\+([0-9]+))\"");

  private static final Pattern BETA_TAG_NAME = Pattern.compile("\"name\"\\s*:\\s*\"(jdk([0-9]+)-(20[0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)-beta)\"");

  private static final Pattern JDK_URL = Pattern.compile(//
    "href=\"/(adoptium/temurin[0-9]+-binaries/releases/download/jdk[0-9]*-[^/]+/OpenJDK[^-]*-jdk_[^\"]*\\.(zip|tar.gz))\"");

  private static final String BEGIN_MARKER = "// Begin generated by /org.eclipse.justj.codegen/src/org/eclipse/justj/codegen/model/util/TemurinIndexer.java";

  private static final String END_MARKER = "// End generated by /org.eclipse.justj.codegen/src/org/eclipse/justj/codegen/model/util/TemurinIndexer.java";

  public static void main(String[] args) throws Exception
  {
    PrintStream out = System.out;

    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()
      {
        int start = 0;

        @Override
        public void flush() throws java.io.IOException
        {
          super.flush();
          System.out.write(buf, start, count - start);
          start = count;
        }
      };

    out = new PrintStream(byteArrayOutputStream, true, StandardCharsets.UTF_8);

    out.println(BEGIN_MARKER);

    for (String repo : new String []{ "11", "17", "18", "19" })
    {
      List<String> lines = getTags(repo);
      Map<Long, String> versionTags = new TreeMap<>(Comparator.reverseOrder());
      for (String line : lines)
      {
        for (Matcher matcher = TAG_NAME.matcher(line); matcher.find();)
        {
          long version = Integer.parseInt(matcher.group(2));
          version = 1000L * version + (matcher.group(3) == null ? 0 : Integer.parseInt(matcher.group(3)));
          version = 100L * version + (matcher.group(4) == null ? 0 : Integer.parseInt(matcher.group(4)));
          version = 100L * version + (matcher.group(5) == null ? 0 : Integer.parseInt(matcher.group(5)));
          version = 100L * version + Integer.parseInt(matcher.group(6));
          versionTags.put(version, matcher.group(1));
        }
      }

      if (versionTags.isEmpty())
      {
        for (String line : lines)
        {
          for (Matcher matcher = BETA_TAG_NAME.matcher(line); matcher.find();)
          {
            long version = Integer.parseInt(matcher.group(2));
            version = 100L * version + Integer.parseInt(matcher.group(3));
            version = 100L * version + Integer.parseInt(matcher.group(4));
            version = 100L * version + Integer.parseInt(matcher.group(5));
            version = 1000L * version + Integer.parseInt(matcher.group(6));
            version = 1000L * version + Integer.parseInt(matcher.group(7));
            versionTags.put(version, matcher.group(1));
          }
        }

        if (versionTags.isEmpty())
        {
          for (String line : lines)
          {
            for (Matcher matcher = TAG_NAME_ANY.matcher(line); matcher.find();)
            {
              String name = matcher.group(1);
              System.err.println("###" + name);
            }
          }
        }
      }

      out.println();
      out.println("// Tags " + versionTags.values().stream().limit(10).collect(Collectors.joining(", ")));

      String latest = versionTags.entrySet().iterator().next().getValue();
      URL downloadsURL = new URL("https://github.com/adoptium/temurin" + repo + "-binaries/releases/tag/" + latest);
      List<String> jdkDownloadURLs = new ArrayList<>();
      try (InputStream download = downloadsURL.openStream())
      {
        List<String> downloads = new BufferedReader(new InputStreamReader(download)).lines().collect(Collectors.toList());
        for (String downloadLine : downloads)
        {
          for (Matcher matcher = JDK_URL.matcher(downloadLine); matcher.find();)
          {
            jdkDownloadURLs.add("https://github.com/" + matcher.group(1).replace("%2B", "+"));
          }
        }
      }

      out.println("def java" + repo + "Adoptium = [");
      out.println("  label: 'Java " + repo + " (Adoptium)',");
      out.println("  BUILD_DESCRIPTION: 'Build Adoptium Java " + repo + "',");
      out.println("  PUBLISH_LOCATION_PREFIX: \"${defaultPrefix}\",");
      out.println("  JUSTJ_MANIFEST_URL: \"${justjURL}/${defaultPrefix}/" + repo + "/downloads/latest/justj.manifest\",");
      out.println("  JDK_URLS_WINDOWS: '''");
      {
        String jdkURL = getURL(jdkDownloadURLs, "x64_windows");
        if (jdkURL != null)
        {
          out.println("    " + jdkURL);
        }
      }
      out.println("    ''',");

      out.println("  JDK_URLS_MACOS: '''");
      {
        String jdkURL = getURL(jdkDownloadURLs, "x64_mac");
        if (jdkURL != null)
        {
          out.println("    " + jdkURL);
        }
      }
      out.println("    ''',");

      out.println("  JDK_URLS_MACOS_AARCH64: '''");
      {
        String jdkURL = getURL(jdkDownloadURLs, "aarch64_mac");
        if (jdkURL != null)
        {
          out.println("    " + jdkURL);
        }
      }
      out.println("    ''',");

      out.println("  JDK_URLS_LINUX: '''");
      {
        String jdkURL = getURL(jdkDownloadURLs, "x64_linux");
        if (jdkURL != null)
        {
          out.println("    " + jdkURL);
        }
      }
      out.println("    ''',");

      out.println("  JDK_URLS_LINUX_AARCH64: '''");
      {
        String jdkURL = getURL(jdkDownloadURLs, "aarch64_linux");
        if (jdkURL != null)
        {
          out.println("    " + jdkURL);
        }
      }
      out.println("    ''',");

      out.println("  BUILD_TYPE: 'nightly',");
      out.println("  PROMOTE: 'true'");
      out.println("]");
    }

    out.println();
    out.println(END_MARKER);

    if (args.length == 1)
    {
      Path target = Paths.get(args[0]);
      String contents = Files.readString(target);
      String newGeneratedContents = new String(byteArrayOutputStream.toByteArray(), StandardCharsets.UTF_8);
      contents = contents.replaceAll("(?s)" + Pattern.quote(BEGIN_MARKER) + ".*" + Pattern.quote(END_MARKER) + "\r?\n", Matcher.quoteReplacement(newGeneratedContents));
      Files.writeString(target, contents);
    }
  }

  private static List<String> getTags(String repo) throws Exception
  {
    List<String> result = new ArrayList<>();
    LOOP: for (int i = 1; i < 10; ++i)
    {
      URL url = new URL("https://api.github.com/repos/adoptium/temurin" + repo + "-binaries/tags?page=" + i);
      try (InputStream input = url.openStream())
      {
        List<String> lines = new BufferedReader(new InputStreamReader(input)).lines().collect(Collectors.toList());
        for (String line : lines)
        {
          if (result.contains(line))
          {
            break LOOP;
          }
          result.add(line);
        }
      }
    }
    return result;
  }

  private static String getURL(List<String> downloadURLs, String type)
  {
    for (String downloadURL : downloadURLs)
    {
      if (downloadURL.contains(type))
      {
        return downloadURL;
      }
    }

    return null;
  }
}

/**
 * Copyright (c) 2021 Eclipse contributors and others.
 *
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.justj.codegen.model.util;


import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.URIConverter;


public class TemurinIndexer
{
  private static final Pattern ASSETS_PATTERN = Pattern.compile("\"link\": \"([^\"]+\\.(zip|tar.gz))\"");

  private static final Pattern VERSION_PATTERN = Pattern.compile("jdk-([0-9.+]+)/");

  private static final Pattern BETA_VERSION_PATTERN = Pattern.compile("jdk-([0-9.+]+)-ea-beta/");

  private static final String BEGIN_MARKER = "// Begin generated by /org.eclipse.justj.codegen/src/org/eclipse/justj/codegen/model/util/TemurinIndexer.java";

  private static final String END_MARKER = "// End generated by /org.eclipse.justj.codegen/src/org/eclipse/justj/codegen/model/util/TemurinIndexer.java";

  private static final String BEGIN_BETA_MARKER = "// Begin beta generated by /org.eclipse.justj.codegen/src/org/eclipse/justj/codegen/model/util/TemurinIndexer.java";

  private static final String END_BETA_MARKER = "// End beta generated by /org.eclipse.justj.codegen/src/org/eclipse/justj/codegen/model/util/TemurinIndexer.java";

  private static Path cache;

  public static void main(String[] argsx) throws Exception
  {
    List<String> arguments = new ArrayList<String>(List.of(argsx));
    if (arguments.size() > 1)
    {
      cache = Path.of(arguments.remove(0));
    }

    generate(false, arguments);
    generate(true, arguments);
  }

  public static void generate(boolean beta, List<String> arguments) throws Exception
  {
    PrintStream out = System.out;

    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()
      {
        int start = 0;

        @Override
        public void flush() throws java.io.IOException
        {
          super.flush();
          System.out.write(buf, start, count - start);
          start = count;
        }
      };

    out = new PrintStream(byteArrayOutputStream, true, StandardCharsets.UTF_8);

    out.println(beta ? BEGIN_BETA_MARKER : BEGIN_MARKER);

    for (String repo : beta ? new String []{ "25" } : new String []{ "11", "17", "21", "23", "24" })
    {
      URI releasesURI = beta
        ? URI.createURI("https://api.adoptium.net/v3/assets/feature_releases/" + repo + "/ea?image_type=jdk&jvm_impl=hotspot&project=jdk&vendor=eclipse")
        : URI.createURI("https://api.adoptium.net/v3/assets/latest/" + repo + "/hotspot?image_type=jdk&vendor=eclipse");
      String content = getContent(releasesURI);

      String version = null;
      List<String> jdkDownloadURLs = new ArrayList<>();
      for (Matcher assetsMatcher = ASSETS_PATTERN.matcher(content); assetsMatcher.find();)
      {
        String url = assetsMatcher.group(1).replace("%2B", "+");
        if (version == null)
        {
          Matcher versionMatcher = (beta ? BETA_VERSION_PATTERN : VERSION_PATTERN).matcher(url);
          versionMatcher.find();
          version = versionMatcher.group(1);
        }

        jdkDownloadURLs.add(url);
      }

      out.println();

      out.println("def java" + repo + "Adoptium = [");
      out.println("  label: 'Java " + repo + " (Adoptium)" + (beta ? " Early Access Beta" : "") + "',");
      out.println("  BUILD_DESCRIPTION: 'Adoptium Java " + version + "',");
      out.println("  PUBLISH_LOCATION_PREFIX: \"${defaultPrefix}\",");
      out.println("  JUSTJ_MANIFEST_URL: \"${justjURL}/${defaultPrefix}/" + repo + "/downloads/latest/justj.manifest\",");

      out.println("  JDK_URLS_WINDOWS: '''");
      {
        String jdkURL = getURL(jdkDownloadURLs, "x64_windows");
        if (jdkURL != null)
        {
          out.println("    " + jdkURL);
        }
      }
      out.println("    ''',");

      out.println("  JDK_URLS_WINDOWS_AARCH64: '''");
      {
        String jdkURL = getURL(jdkDownloadURLs, "aarch64_windows");
        if (jdkURL != null)
        {
          out.println("    " + jdkURL);
        }
      }
      out.println("    ''',");

      out.println("  JDK_URLS_MACOS: '''");
      {
        String jdkURL = getURL(jdkDownloadURLs, "x64_mac");
        if (jdkURL != null)
        {
          out.println("    " + jdkURL);
        }
      }
      out.println("    ''',");

      out.println("  JDK_URLS_MACOS_AARCH64: '''");
      {
        String jdkURL = getURL(jdkDownloadURLs, "aarch64_mac");
        if (jdkURL != null)
        {
          out.println("    " + jdkURL);
        }
      }
      out.println("    ''',");

      out.println("  JDK_URLS_LINUX: '''");
      {
        String jdkURL = getURL(jdkDownloadURLs, "x64_linux");
        if (jdkURL != null)
        {
          out.println("    " + jdkURL);
        }
      }
      out.println("    ''',");

      out.println("  JDK_URLS_LINUX_AARCH64: '''");
      {
        String jdkURL = getURL(jdkDownloadURLs, "aarch64_linux");
        if (jdkURL != null)
        {
          out.println("    " + jdkURL);
        }
      }
      out.println("    ''',");

      out.println("  JDK_URLS_LINUX_PPC64LE: '''");
      {
        String jdkURL = getURL(jdkDownloadURLs, "ppc64le_linux");
        if (jdkURL != null)
        {
          out.println("    " + jdkURL);
        }
      }
      out.println("    ''',");

      out.println("  JDK_URLS_LINUX_RISCV64: '''");
      {
        String jdkURL = getURL(jdkDownloadURLs, "riscv64_linux");
        if (jdkURL != null)
        {
          out.println("    " + jdkURL);
        }
      }
      out.println("    ''',");

      out.println("  BUILD_TYPE: 'nightly',");
      out.println("  PROMOTE: 'true'");
      out.println("]");
    }

    out.println();
    out.println(beta ? END_BETA_MARKER : END_MARKER);

    if (arguments.size() > 0)
    {
      Path target = Paths.get(arguments.get(0));
      String contents = Files.readString(target);
      String newGeneratedContents = new String(byteArrayOutputStream.toByteArray(), StandardCharsets.UTF_8);
      if (!contents.contains("\r\n") && newGeneratedContents.contains("\r\n"))
      {
        newGeneratedContents = newGeneratedContents.replace("\r\n", "\n");
      }
      contents = contents.replaceAll(
        "(?s)" + Pattern.quote(beta ? BEGIN_BETA_MARKER : BEGIN_MARKER) + ".*?" + Pattern.quote(beta ? END_BETA_MARKER : END_MARKER) + "\r?\n",
        Matcher.quoteReplacement(newGeneratedContents));
      Files.writeString(target, contents);
    }
  }

  private static String getURL(List<String> downloadURLs, String type)
  {
    for (String downloadURL : downloadURLs)
    {
      if (downloadURL.contains(type))
      {
        return downloadURL;
      }
    }

    return null;
  }

  private static Path getCachePath(URI uri)
  {
    if (cache == null)
    {
      return null;
    }

    String decodedURI = URI.decode(uri.toString());
    String[] uriSegments = decodedURI.split("[:/?#&;]+");
    Path result = cache.resolve(String.join("/", uriSegments));
    if (uri.hasTrailingPathSeparator())
    {
      return result.resolve("-folder-contents");
    }
    return result;
  }

  private static String getContent(URI uri) throws IOException
  {
    Path path = getCachePath(uri);
    if (path != null && Files.isRegularFile(path))
    {
      return Files.readString(path);
    }

    try (InputStream in = URIConverter.INSTANCE.createInputStream(uri))
    {
      String content = new String(in.readAllBytes(), StandardCharsets.UTF_8);
      if (path != null)
      {
        Files.createDirectories(path.getParent());
        Files.writeString(path, content);
      }
      return content;
    }
  }
}
